package uk.ac.bham.sitra;


/**
 * <p>All transformation Rules have to implement this interface.</p>
 * 
 *
 * @param <S> The type of the source object to transform
 * @param <T> The type of the target object generated
 * 
 * @author David Akehurst
 * @author Behzad Bordbar
 * @version 0.2
 * @see Transformer 
 */
public interface Rule<S,T> {
	
	/**
	 * The implementation will return true or false, depending on whether
	 * the transformation rule should be applied.
	 *
	 */
	boolean check(S source);
	
	/**
	 * <p>The implementations of this method are responsible for generating 
	 * the target object for a given source object and a transformer.
	 * 
	 * <p>In particular implementation should create and return a target object
	 * of type <code>T</code> for the given source element <code>source</code>
	 * and the {@link Transformer} implementation <code>t</code>
	 * 
	 * @param source The source object to transform.
	 * @param t The transformer implementation responsible for carrying 
	 * out the actual transformation.
	 * @return The target object generated by this rule. 
	 */
	T build(S source, Transformer t);
	
	/**
	 * <p>Implementations can use this method should contain the code
	 * to set the values of properties 
	 * of the target object <code>target</code> after it has been generated by the
	 * <code>build</code> method. 
	 * 
	 * @param target The target object for which we want to update the properties.
	 * @param source The source object that corresponds to the target object.
	 * @param t A Transformer implementation.
	 */
	void setProperties(T target, S source, Transformer t);
}
